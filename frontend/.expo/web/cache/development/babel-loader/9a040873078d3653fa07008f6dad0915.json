{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport 'react-native-gesture-handler';\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport React, { useState } from 'react';\nimport AppLoading from 'expo-app-loading';\nimport { useFonts, Anton_400Regular } from '@expo-google-fonts/anton';\nimport Routes from \"./src/router\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport api from \"./src/services/apiConfig\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useFonts = useFonts({\n    Anton_400Regular: Anton_400Regular\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  getMyStringValue = function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('@username').getItem('@password'));\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 8:\n            console.log('Done.');\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n\n  var verifyUser = function _callee2() {\n    var token;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.AsyncStorage.getItem('@TOKEN_KEY'));\n\n          case 3:\n            token = _context2.sent;\n\n            if (!token) {}\n\n            api({\n              method: 'get',\n              url: \"/oauth/token\",\n              auth: {\n                username: \"dscatalog\",\n                password: \"dscatalog123\"\n              },\n              contentType: \"application/x-www-form-urlencoded\",\n              headers: {\n                'content-type': 'application/x-www-form-urlencoded'\n              },\n              data: JSON.stringify({\n                username: data.email,\n                password: data.password,\n                grant_type: \"password\"\n              })\n            }).then(function (response) {\n              console.log(response.data);\n            }).catch(function (err) {\n              console.log(err);\n            });\n            _context2.next = 10;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  if (!fontsLoaded) {\n    return _jsx(AppLoading, {});\n  }\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      style: \"auto\",\n      backgroundColor: \"#000\",\n      translucent: true\n    }), _jsx(Routes, {})]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["StatusBar","React","useState","AppLoading","useFonts","Anton_400Regular","Routes","AsyncStorage","api","App","fontsLoaded","user","setUser","getMyStringValue","getItem","console","log","verifyUser","token","method","url","auth","username","password","contentType","headers","data","JSON","stringify","email","grant_type","then","response","catch","err","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"sources":["/home/bruno/dev/simple-projects/frontend/App.js"],"sourcesContent":["import 'react-native-gesture-handler';\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet } from 'react-native';\nimport React, { useState } from 'react';\nimport AppLoading from 'expo-app-loading';\nimport {useFonts, Anton_400Regular} from '@expo-google-fonts/anton';\nimport Routes from './src/router';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport api from './src/services/apiConfig';\n\nexport default function App() {\n\n  let [fontsLoaded] = useFonts({\n    Anton_400Regular,\n  });\n\n  const [user, setUser] = useState({});\n  \n  getMyStringValue = async () => {\n    try {\n      return await AsyncStorage.getItem('@username').getItem('@password')\n    } catch(e) {\n      // read error\n    }\n  \n    console.log('Done.')\n  \n  }\n\n  const verifyUser = async () => {\n    try{\n      let token = await AsyncStorage.AsyncStorage.getItem('@TOKEN_KEY');\n      if(!token) {\n\n      }\n      api({\n        method: 'get',\n        url: `/oauth/token`,\n        auth: {\n            username: \"dscatalog\", \n            password: \"dscatalog123\" \n        },\n        contentType: \"application/x-www-form-urlencoded\",\n        headers: { 'content-type': 'application/x-www-form-urlencoded' },\n        data: JSON.stringify({\n            username: data.email,\n            password: data.password,\n            grant_type: \"password\",\n        })}).then((response) => {\n          console.log(response.data);\n      }).catch((err) => {\n        console.log(err);\n      })\n      \n    } catch (e) {\n\n    }\n  }\n\n  if(!fontsLoaded){ \n    return <AppLoading />\n  }\n\n  return (\n    <>\n      <StatusBar style=\"auto\" backgroundColor=\"#000\" translucent={true}/>\n      <Routes/>\n    </> \n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});"],"mappings":";;AAAA,OAAO,8BAAP;AACA,SAASA,SAAT,QAA0B,iBAA1B;;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAAQC,QAAR,EAAkBC,gBAAlB,QAAyC,0BAAzC;AACA,OAAOC,MAAP;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,GAAP;;;;AAEA,eAAe,SAASC,GAAT,GAAe;EAE5B,gBAAoBL,QAAQ,CAAC;IAC3BC,gBAAgB,EAAhBA;EAD2B,CAAD,CAA5B;EAAA;EAAA,IAAKK,WAAL;;EAIA,gBAAwBR,QAAQ,CAAC,EAAD,CAAhC;EAAA;EAAA,IAAOS,IAAP;EAAA,IAAaC,OAAb;;EAEAC,gBAAgB,GAAG;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA;YAAA,iCAEFN,YAAY,CAACO,OAAb,CAAqB,WAArB,EAAkCA,OAAlC,CAA0C,WAA1C,CAFE;;UAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAOjBC,OAAO,CAACC,GAAR,CAAY,OAAZ;;UAPiB;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAnB;;EAWA,IAAMC,UAAU,GAAG;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA;YAAA,iCAEGV,YAAY,CAACA,YAAb,CAA0BO,OAA1B,CAAkC,YAAlC,CAFH;;UAAA;YAEXI,KAFW;;YAGf,IAAG,CAACA,KAAJ,EAAW,CAEV;;YACDV,GAAG,CAAC;cACFW,MAAM,EAAE,KADN;cAEFC,GAAG,gBAFD;cAGFC,IAAI,EAAE;gBACFC,QAAQ,EAAE,WADR;gBAEFC,QAAQ,EAAE;cAFR,CAHJ;cAOFC,WAAW,EAAE,mCAPX;cAQFC,OAAO,EAAE;gBAAE,gBAAgB;cAAlB,CARP;cASFC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;gBACjBN,QAAQ,EAAEI,IAAI,CAACG,KADE;gBAEjBN,QAAQ,EAAEG,IAAI,CAACH,QAFE;gBAGjBO,UAAU,EAAE;cAHK,CAAf;YATJ,CAAD,CAAH,CAaOC,IAbP,CAaY,UAACC,QAAD,EAAc;cACtBjB,OAAO,CAACC,GAAR,CAAYgB,QAAQ,CAACN,IAArB;YACH,CAfD,EAeGO,KAfH,CAeS,UAACC,GAAD,EAAS;cAChBnB,OAAO,CAACC,GAAR,CAAYkB,GAAZ;YACD,CAjBD;YANe;YAAA;;UAAA;YAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAnB;;EA8BA,IAAG,CAACxB,WAAJ,EAAgB;IACd,OAAO,KAAC,UAAD,KAAP;EACD;;EAED,OACE;IAAA,WACE,KAAC,SAAD;MAAW,KAAK,EAAC,MAAjB;MAAwB,eAAe,EAAC,MAAxC;MAA+C,WAAW,EAAE;IAA5D,EADF,EAEE,KAAC,MAAD,KAFF;EAAA,EADF;AAMD;AAED,IAAMyB,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;EAC/BC,SAAS,EAAE;IACTC,IAAI,EAAE,CADG;IAETC,eAAe,EAAE,MAFR;IAGTC,UAAU,EAAE,QAHH;IAITC,cAAc,EAAE;EAJP;AADoB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}